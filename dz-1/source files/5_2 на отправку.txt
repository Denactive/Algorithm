#include <iostream>
#include <string>

typedef struct {
    short d;
    short m;
    short y;
} date;

class DateComparator {
public:
    bool operator()(const date& l, const date& r)
    {
        if (l.y == r.y)
            if (l.m == r.m)
                return l.d < r.d;
            else
                return l.m < r.m;
        else
            return l.y < r.y;        
    }
};
template <typename T, typename Comparator>
int merge(T* l, size_t lsize, T* r, size_t rsize, T* res) {
    size_t lpos = 0;
    size_t rpos = 0;
    Comparator cmp;
    while (lpos < lsize && rpos < rsize) {
        if (cmp(l[lpos], r[rpos])) {
            res[lpos + rpos] = l[lpos];
            lpos++;
        }
        else {
            res[lpos + rpos] = r[rpos];
            rpos++;
        }
    }
    if (lpos == lsize) {
        if (!memcpy(res + lpos + rpos, r + rpos, (rsize - rpos) * sizeof(T)))
            return -1;
    }
    else {
        if (!memcpy(res + lpos + rpos, l + lpos, (lsize - lpos) * sizeof(T)))
            return -1;
    }
    return 0;
}

template <typename T, typename Comparator>
int merge_sort(T* arr, size_t len) {
    if (!arr)
        return 0;

    if (len <= 1)
        return 0;

    size_t lsize = len / 2;
    size_t rsize = len - lsize;

    if (merge_sort<T, Comparator>(arr, lsize))
        return -1;
    if (merge_sort<T, Comparator>(arr + lsize, rsize))
        return -1;

    T* tmp = new T [len];
    if (!tmp)
        return -1;

    if (merge<T, Comparator>(arr, lsize, arr + lsize, rsize, tmp))
        return -1;

    if (!memcpy(arr, tmp, len * sizeof(T)))
        return -1;
    
    delete [] tmp;
    return 0;
}

int main() {
	int n = 0;
    std::cin >> n;

    date* a = new date [n]; // 18-ти летия 
    date* b = new date [n]; // смерти и 80-ти летия
    int size = 0;

	// добавление в вектор по восемнадцатилетию
	DateComparator date_cmp;
	for (int i = 0; i < n; i++) {
		date birth = { 0 };
		date death = { 0 };
		std::cin >> birth.d >> birth.m >> birth.y >> death.d >> death.m >> death.y;
		date tmp = birth;
		tmp.y += 18;
		if (date_cmp(tmp, death)) {
            a[size] = tmp;
            tmp.y += 62;
            if (date_cmp(death, tmp))
                b[size] = death;
            else
                b[size] = tmp;
            size++;
		}
	}
    
    int current_alive = 0;
    int max_alive = 0;

    int i[2] = { 0, 0 };
    while (i[0] < size && i[1] < size) {
        if (date_cmp(a[i[0]], b[i[1]])) {
            current_alive++;
            i[0]++;
            if (current_alive > max_alive)
                max_alive = current_alive;
            continue;
        }
        if (a[i[0]].d == b[i[1]].d && a[i[0]].m == b[i[1]].m && a[i[0]].y == b[i[1]].y) {
            i[0]++;
            i[1]++;
        }
        else {
            current_alive--;
            i[1]++;
        }
        if (current_alive > max_alive)
            current_alive = max_alive;
    }
    std::cout << max_alive;
    delete[] a;
	delete[] b;
	return 0;
}